const { expect } = require("chai")

describe("KickFactory contract", function () {

    let KickFactory
    let kickBronze
    let kickSilver
    let kickGold
    let hardhatKickFactory
    let owner
    let addr1
    let addr2
    let addrs
    
    const eth_001 = ethers.utils.parseEther("0.001")
    const eth_007 = ethers.utils.parseEther("0.007")
    const eth_01 = ethers.utils.parseEther("0.01")
    const eth_02 = ethers.utils.parseEther("0.02")
    const eth_03 = ethers.utils.parseEther("0.03")
    const eth_04 = ethers.utils.parseEther("0.04")
    const eth_05 = ethers.utils.parseEther("0.05")
    const eth_06 = ethers.utils.parseEther("0.06")
    const eth_07 = ethers.utils.parseEther("0.07")

    const MINTER_ROLE = ethers.utils.keccak256(ethers.utils.toUtf8Bytes("MINTER_ROLE"));
    const logger = ethers.utils.Logger.globalLogger()
    
    beforeEach(async function () {
        KickFactory = await ethers.getContractFactory("KickFactory")
        KickBronze = await ethers.getContractFactory("KickBronze")
        KickSilver = await ethers.getContractFactory("KickSilver")
        KickGold = await ethers.getContractFactory("KickGold")
        ;[owner, addr1, addr2, ...addrs] = await ethers.getSigners()
        hardhatKickBronze = await KickBronze.deploy()
        hardhatKickSilver = await KickSilver.deploy()
        hardhatKickGold = await KickGold.deploy()
        hardhatKickFactory = await KickFactory.deploy(hardhatKickBronze.address, hardhatKickSilver.address, hardhatKickGold.address)
    })

    it("should start with no projects", async function () {
        expect(await hardhatKickFactory.numProjects()).to.equal(0)
    })

    it("should create 1 project on calling launchProject", async function () {
        await hardhatKickFactory.launchProject(eth_04, 0, 0, eth_01, eth_02, eth_05)
        expect(await hardhatKickFactory.numProjects()).to.equal(1)
    })

    it("should reject project if bronze level is not less than silver", async function () {
        await expect(hardhatKickFactory.launchProject(eth_04, 0, 0, eth_04, eth_03, eth_06)).to.be.revertedWith("bronze, silver, gold levels must be in ascending order")
        expect(await hardhatKickFactory.numProjects()).to.equal(0)
    })

    it("should reject project if silver level is not less than gold", async function () {
        await expect(hardhatKickFactory.launchProject(eth_04, 0, 0, eth_03, eth_06, eth_06)).to.be.revertedWith("bronze, silver, gold levels must be in ascending order")
        expect(await hardhatKickFactory.numProjects()).to.equal(0)
    })

    it("should create 1 more project on subsequent call to launchProject", async function () {
        await hardhatKickFactory.launchProject(eth_04, 0, 0, eth_01, eth_02, eth_05)
        await hardhatKickFactory.launchProject(eth_04, 0, 0, eth_01, eth_02, eth_05)
        expect(await hardhatKickFactory.numProjects()).to.equal(2)
    })

    describe("KickProject contract", function () {
        it("should be created with correct goal and draw down interval", async function () {
            await hardhatKickFactory.launchProject(eth_06, 300, 60, eth_01, eth_02, eth_05)
            const KickProject = await ethers.getContractFactory("KickProject")
            const hardhatKickProject = await KickProject.attach(await hardhatKickFactory.projects(0))
            expect(await hardhatKickProject.goal()).to.equal(eth_06)
            expect(await hardhatKickProject.drawDownInterval()).to.equal(60)
        })

        it("should accept contributions", async function () {
            await hardhatKickFactory.launchProject(eth_06, 300, 60, eth_01, eth_02, eth_05)
            const KickProject = await ethers.getContractFactory("KickProject")
            const hardhatKickProject = await KickProject.attach(await hardhatKickFactory.projects(0))
            await hardhatKickBronze.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickProject.connect(addr1).contribute({value: eth_06})
            expect(await hardhatKickProject.amountCollected()).to.equal(eth_06)
            expect(await hardhatKickProject.contributions(addr1.getAddress())).to.equal(eth_06)
            expect((await hardhatKickBronze.queryFilter("Transfer")).length).to.equal(1)
            expect((await hardhatKickSilver.queryFilter("Transfer")).length).to.equal(1)
            expect((await hardhatKickGold.queryFilter("Transfer")).length).to.equal(1)
            await hardhatKickBronze.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.revokeRole(MINTER_ROLE, hardhatKickProject.address)
        })

        it("should not accept contributions after timeout", async function () {
            await hardhatKickFactory.launchProject(eth_06, 0, 0, eth_01, eth_02, eth_05)
            const KickProject = await ethers.getContractFactory("KickProject")
            const hardhatKickProject = await KickProject.attach(await hardhatKickFactory.projects(0))
            await expect(hardhatKickProject.connect(addr1).contribute({value: eth_06})).to.be.revertedWith("Deadline reached")
            expect(await hardhatKickProject.amountCollected()).to.equal(0)
            expect(await hardhatKickProject.contributions(addr1.getAddress())).to.equal(0)
        })

        it("should not allow contribution withdrawal before timeout", async function () {
            await hardhatKickFactory.launchProject(eth_06, 300, 0, eth_01, eth_02, eth_05)
            const KickProject = await ethers.getContractFactory("KickProject")
            const hardhatKickProject = await KickProject.attach(await hardhatKickFactory.projects(0))
            await hardhatKickBronze.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickProject.connect(addr1).contribute({value: eth_02})
            await hardhatKickProject.connect(addr2).contribute({value: eth_02})
            expect((await hardhatKickBronze.queryFilter("Transfer")).length).to.equal(2)
            expect((await hardhatKickSilver.queryFilter("Transfer")).length).to.equal(2)
            expect((await hardhatKickGold.queryFilter("Transfer")).length).to.equal(0)
            await expect(hardhatKickProject.connect(addr1).withdrawContribution()).to.be.revertedWith("still open")
            expect(await hardhatKickProject.amountCollected()).to.equal(eth_04)
            expect(await hardhatKickProject.contributions(addr1.getAddress())).to.equal(eth_02)
            expect(await hardhatKickProject.contributions(addr2.getAddress())).to.equal(eth_02)
        })

        it("should allow contribution withdrawal after timeout", async function () {
            await hardhatKickFactory.launchProject(eth_06, 300, 0, eth_01, eth_02, eth_05)
            const KickProject = await ethers.getContractFactory("KickProject")
            const hardhatKickProject = await KickProject.attach(await hardhatKickFactory.projects(0))
            await hardhatKickBronze.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickProject.connect(addr1).contribute({value: eth_01})
            await hardhatKickProject.connect(addr2).contribute({value: eth_02})
            await ethers.provider.send("evm_increaseTime", [301])
            await ethers.provider.send("evm_mine", [])
            expect((await hardhatKickBronze.queryFilter("Transfer")).length).to.equal(2)
            expect((await hardhatKickSilver.queryFilter("Transfer")).length).to.equal(1)
            expect((await hardhatKickGold.queryFilter("Transfer")).length).to.equal(0)
            await hardhatKickProject.connect(addr1).withdrawContribution()
            await hardhatKickProject.connect(addr2).withdrawContribution()
            await hardhatKickBronze.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            expect(await hardhatKickProject.amountCollected()).to.equal(0)
            expect(await hardhatKickProject.contributions(addr1.getAddress())).to.equal(0)
            expect(await hardhatKickProject.contributions(addr2.getAddress())).to.equal(0)
        })

        it("should not allow contribution withdrawal by non-contributor", async function () {
            await hardhatKickFactory.launchProject(eth_06, 300, 0, eth_01, eth_02, eth_05)
            const KickProject = await ethers.getContractFactory("KickProject")
            const hardhatKickProject = await KickProject.attach(await hardhatKickFactory.projects(0))
            await hardhatKickBronze.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickProject.connect(addr1).contribute({value: eth_02})
            await hardhatKickProject.cancel()
            expect((await hardhatKickBronze.queryFilter("Transfer")).length).to.equal(1)
            expect((await hardhatKickSilver.queryFilter("Transfer")).length).to.equal(1)
            expect((await hardhatKickGold.queryFilter("Transfer")).length).to.equal(0)
            await expect(hardhatKickProject.connect(addr2).withdrawContribution()).to.be.revertedWith("No contribution made")
            await hardhatKickProject.connect(addr1).withdrawContribution()
            await hardhatKickBronze.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            expect(await hardhatKickProject.amountCollected()).to.equal(0)
            expect(await hardhatKickProject.contributions(addr1.getAddress())).to.equal(0)
            expect(await hardhatKickProject.contributions(addr2.getAddress())).to.equal(0)
        })

        it("should allow contribution withdrawal after cancellation", async function () {
            await hardhatKickFactory.launchProject(eth_06, 300, 0, eth_01, eth_02, eth_05)
            const KickProject = await ethers.getContractFactory("KickProject")
            const hardhatKickProject = await KickProject.attach(await hardhatKickFactory.projects(0))
            await hardhatKickBronze.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickProject.connect(addr1).contribute({value: eth_02})
            await hardhatKickProject.connect(addr2).contribute({value: eth_02})
            await hardhatKickProject.cancel();
            await hardhatKickProject.connect(addr1).withdrawContribution()
            expect(await hardhatKickProject.amountCollected()).to.equal(eth_02)
            expect(await hardhatKickProject.contributions(addr1.getAddress())).to.equal(0)
            expect(await hardhatKickProject.contributions(addr2.getAddress())).to.equal(eth_02)
            expect((await hardhatKickBronze.queryFilter("Transfer")).length).to.equal(2)
            expect((await hardhatKickSilver.queryFilter("Transfer")).length).to.equal(2)
            expect((await hardhatKickGold.queryFilter("Transfer")).length).to.equal(0)
            await hardhatKickBronze.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.revokeRole(MINTER_ROLE, hardhatKickProject.address)
        })

        it("should not accept contributions after cancellation", async function () {
            await hardhatKickFactory.launchProject(eth_06, 300, 0, eth_01, eth_02, eth_05)
            const KickProject = await ethers.getContractFactory("KickProject")
            const hardhatKickProject = await KickProject.attach(await hardhatKickFactory.projects(0))
            await hardhatKickBronze.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickProject.cancel()    
            await expect(hardhatKickProject.connect(addr1).contribute({value: eth_06})).to.be.revertedWith("Project cancelled")
            expect((await hardhatKickBronze.queryFilter("Transfer")).length).to.equal(0)
            expect((await hardhatKickSilver.queryFilter("Transfer")).length).to.equal(0)
            expect((await hardhatKickGold.queryFilter("Transfer")).length).to.equal(0)
            await hardhatKickBronze.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            expect(await hardhatKickProject.amountCollected()).to.equal(0)
            expect(await hardhatKickProject.contributions(addr1.getAddress())).to.equal(0)
        })

        it("should not accept contributions after reaching funding goal", async function () {
            await hardhatKickFactory.launchProject(eth_06, 300, 0, eth_01, eth_02, eth_05)
            const KickProject = await ethers.getContractFactory("KickProject")
            const hardhatKickProject = await KickProject.attach(await hardhatKickFactory.projects(0))
            await hardhatKickBronze.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickProject.connect(addr1).contribute({value: eth_06})
            await expect(hardhatKickProject.connect(addr2).contribute({value: eth_06})).to.be.revertedWith("Project goal met")
            expect((await hardhatKickBronze.queryFilter("Transfer")).length).to.equal(1)
            expect((await hardhatKickSilver.queryFilter("Transfer")).length).to.equal(1)
            expect((await hardhatKickGold.queryFilter("Transfer")).length).to.equal(1)
            expect(await hardhatKickProject.amountCollected()).to.equal(eth_06)
            expect(await hardhatKickProject.contributions(addr1.getAddress())).to.equal(eth_06)
            expect(await hardhatKickProject.contributions(addr2.getAddress())).to.equal(0)
        })

        it("should allow draw down after reaching funding goal", async function () {
            await hardhatKickFactory.launchProject(eth_06, 300, 0, eth_01, eth_02, eth_05)
            const KickProject = await ethers.getContractFactory("KickProject")
            const hardhatKickProject = await KickProject.attach(await hardhatKickFactory.projects(0))
            await hardhatKickBronze.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickProject.connect(addr1).contribute({value: eth_03})
            await hardhatKickProject.connect(addr2).contribute({value: eth_03})
            await hardhatKickProject.drawDownFunds(eth_04)
            expect((await hardhatKickBronze.queryFilter("Transfer")).length).to.equal(2)
            expect((await hardhatKickSilver.queryFilter("Transfer")).length).to.equal(2)
            expect((await hardhatKickGold.queryFilter("Transfer")).length).to.equal(0)
            expect(await hardhatKickProject.amountCollected()).to.equal(eth_06)
            expect(await hardhatKickProject.contributions(addr1.getAddress())).to.equal(eth_03)
            expect(await hardhatKickProject.contributions(addr2.getAddress())).to.equal(eth_03)
            expect(await hardhatKickProject.drawnDown()).to.equal(eth_04)
            await hardhatKickBronze.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.revokeRole(MINTER_ROLE, hardhatKickProject.address)
        })

        it("should not allow draw down before reaching funding goal", async function () {
            await hardhatKickFactory.launchProject(eth_07, 300, 0, eth_01, eth_02, eth_05)
            const KickProject = await ethers.getContractFactory("KickProject")
            const hardhatKickProject = await KickProject.attach(await hardhatKickFactory.projects(0))
            await hardhatKickBronze.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickProject.connect(addr1).contribute({value: eth_03})
            await hardhatKickProject.connect(addr2).contribute({value: eth_03})
            await expect(hardhatKickProject.drawDownFunds(eth_04)).to.be.revertedWith("Goal not met")
            await hardhatKickBronze.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            expect(await hardhatKickProject.amountCollected()).to.equal(eth_06)
            expect(await hardhatKickProject.contributions(addr1.getAddress())).to.equal(eth_03)
            expect(await hardhatKickProject.contributions(addr2.getAddress())).to.equal(eth_03)
            expect(await hardhatKickProject.drawnDown()).to.equal(0)
            expect((await hardhatKickBronze.queryFilter("Transfer")).length).to.equal(2)
            expect((await hardhatKickSilver.queryFilter("Transfer")).length).to.equal(2)
            expect((await hardhatKickGold.queryFilter("Transfer")).length).to.equal(0)
        })

        it("should not allow full draw down immediately when timed withdrawal has been requested", async function () {
            await hardhatKickFactory.launchProject(eth_07, 300, 100, eth_01, eth_02, eth_05)
            const KickProject = await ethers.getContractFactory("KickProject")
            const hardhatKickProject = await KickProject.attach(await hardhatKickFactory.projects(0))
            await hardhatKickBronze.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.grantRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickProject.connect(addr1).contribute({value: eth_03})
            await hardhatKickProject.connect(addr2).contribute({value: eth_04})
            await expect(hardhatKickProject.drawDownFunds(eth_04)).to.be.revertedWith("Insufficient funds")
            await hardhatKickProject.drawDownFunds(eth_007)
            await expect(hardhatKickProject.drawDownFunds(eth_001)).to.be.revertedWith("Insufficient funds")
            await hardhatKickBronze.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickSilver.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            await hardhatKickGold.revokeRole(MINTER_ROLE, hardhatKickProject.address)
            expect(await hardhatKickProject.amountCollected()).to.equal(eth_07)
            expect(await hardhatKickProject.contributions(addr1.getAddress())).to.equal(eth_03)
            expect(await hardhatKickProject.contributions(addr2.getAddress())).to.equal(eth_04)
            expect(await hardhatKickProject.drawnDown()).to.equal(eth_007)
            expect((await hardhatKickBronze.queryFilter("Transfer")).length).to.equal(2)
            expect((await hardhatKickSilver.queryFilter("Transfer")).length).to.equal(2)
            expect((await hardhatKickGold.queryFilter("Transfer")).length).to.equal(0)
        })
    })

})
